name: Build Kernel
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      target_devices:
        description: 'target device (目标设备)'
        required: true
        type: choice
        default: 'lmi'
        options:
          - 'lmi'
          - 'umi'
          - 'cmi'
          - 'cas'
          - 'thyme'
          - 'munch'
          - 'dagu'
          - 'elish'
          - 'enuma'
          - 'alioth'
          - 'apollo'
          - 'psyche'
          - 'pipa'
          - 'all'
      kernelsu_enable:
        description: 'Is Ksu support enabled? (是否启用 kernelsu 支持?)'
        required: true
        type: choice
        default: 'disable'
        options:
          - 'enable'
          - 'disable'
      kernel_version:
        description: 'Customizing the kernel version number (自定义内核版本号)'
        required: false
        type: string
        default: ''
      build_type:
        description: 'Kernel Build Type (内核构建类型)'
        required: true
        type: choice
        default: 'Release'
        options:
          - 'Release'
          - 'Dev'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          DEVICES="${{ github.event.inputs.target_devices }}"
          if [ "$DEVICES" == "all" ]; then
            DEVICES="umi,cmi,cas,thyme,munch,dagu,elish,enuma,alioth,apollo,lmi,psyche,pipa"
          fi
          DEVICES_JSON="[$(echo $DEVICES | sed 's/,/","/g' | sed 's/.*/"&"/')]"
          echo "matrix={\"device\":$DEVICES_JSON}" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
      fail-fast: false
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      WORKDIR: "${{ github.workspace }}"
      KERNEL_SOURCE: "${{ github.workspace }}/kernel_source"
      DEVICE: "${{ matrix.device }}"

    steps:
      - name: 📢 Build Information (构建信息)
        run: |
          echo "设备: ${DEVICE}"
          echo "KernelSU支持: ${{ github.event.inputs.kernelsu_enable }}"
          echo "构建类型: ${{ github.event.inputs.build_type }}"

      - name: 🚀 Maximize build space (最大化构建空间)
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Install Dependencies
        run: |
          sudo apt-get update -y 
          sudo apt-get install -y \
          build-essential git curl wget bison flex zip bc \
          cpio libssl-dev libncurses-dev gcc \
          python3 python3-pip ccache
            
      - name: Cache Proton Clang
        uses: actions/cache@v4
        id: clang-cache
        with:
          path: toolchain/proton-clang
          key: ${{ runner.os }}-proton-clang

      - name: Download Proton Clang Toolchain
        if: steps.clang-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p toolchain; cd toolchain
          wget https://github.com/kdrag0n/proton-clang/archive/refs/tags/20210522.zip
          unzip 20210522.zip
          mv proton-clang-20210522 proton-clang
          rm proton-clang/bin/ld 20210522.zip
          
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache_mikernel
          key: ${{ runner.os }}-ccache-${{ github.event.inputs.target_device }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ github.event.inputs.target_device }}-

      - name: 📥 Cloning kernel source code (克隆内核源码)
        run: |
          echo "正在克隆内核源码..."
          git clone https://github.com/liyafe1997/kernel_xiaomi_sm8250_mod.git --depth=1 $KERNEL_SOURCE
          echo "✅ Kernel source code cloning complete (内核源码克隆完成)"

      - name: Build Kernel
        run: |
          sed -i 's|TOOLCHAIN_PATH=\$HOME/toolchain/proton-clang/bin|TOOLCHAIN_PATH=$(pwd)/toolchain/proton-clang/bin|' "$KERNEL_SOURCE/build.sh"
          DEVICE="${{ github.event.inputs.target_device }}"
          KSU_enable="${{ github.event.inputs.kernelsu_enable }}"
          VERSION="${{ github.event.inputs.kernel_version }}"

          # 修改内核版本号
          if [ ! -z "$VERSION" ]; then
              echo "🔧 设置自定义内核版本: $VERSION"
              sed -i "s/-dirty/-$VERSION/g" "$KERNEL_SOURCE/scripts/setlocalversion"
          else
              GIT_COMMIT_SHORT=$(git rev-parse --short=13 HEAD)
              echo "🔧 使用默认版本"
              sed -i "s/-dirty/-${GIT_COMMIT_SHORT}-${DEVICE}/g" "$KERNEL_SOURCE/scripts/setlocalversion"
              sed -i "s/echo \"\$res\"/echo \"-perf-${GIT_COMMIT_SHORT}-${DEVICE}\"/g" "$KERNEL_SOURCE/scripts/setlocalversion"
          fi

          FULL_VERSION="$VERSION"
          if [ ! -z "$FULL_VERSION" ]; then
            main_version=$(echo "$FULL_VERSION" | grep -oE '^[0-9]+(\.[0-9]+)*')
            custom_part=$(echo "$FULL_VERSION" | grep -oE '(-[a-zA-Z0-9]+)*$')
            makefile_path="$KERNEL_SOURCE/Makefile"
            IFS='.' read -ra version_parts <<< "$main_version"
            sed -i "2s/.*/VERSION = ${version_parts[0]}/" "$makefile_path"
            if [ -n "${version_parts[1]}" ]; then
              sed -i "3s/.*/PATCHLEVEL = ${version_parts[1]}/" "$makefile_path"
            fi
            if [ -n "${version_parts[2]}" ]; then
              sed -i "4s/.*/SUBLEVEL = ${version_parts[2]}/" "$makefile_path"
            fi

            sed -i "s/echo \"\$res\"/echo \"${custom_part}\"/g" "$KERNEL_SOURCE/scripts/setlocalversion"
          fi

          bash $KERNEL_SOURCE/build.sh "$DEVICE" "$KSU_enable"

      - name: Set Kernel Path
        run: |
          tar -czvf Kernel_All.tar.gz Kernel_*
          KernelPath=$(pwd)/Kernel_All.tar.gz
          echo "KernelPath=$KernelPath" >> $GITHUB_ENV
      
      - name: Upload Kernel
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-${{ matrix.device }}
          path: ${{ env.KernelPath }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: 📥 Download all zip artifacts (下载所有 zip 构建产物)
      uses: actions/download-artifact@v4
      with:
        path: out

    - name: 📝 Preparing files for release (准备发布文件)
      run: |
        mkdir -p release
        cd /home/runner/work/lmi_a15_mod/lmi_a15_mod/out
        device_list=()
        for dir in */; do
          device_name=$(echo "$dir" | sed 's/Kernel-//' | sed 's/\/$//')
          echo "Found device: $device_name"
          device_list+=("$device_name")
          cd "$dir"
        for zip_file in *; do
          if [[ -f "$zip_file" && "$zip_file" == *.zip ]]; then
          mv "$zip_file" /home/runner/work/lmi_a15_mod/lmi_a15_mod/release
        fi
          done
          cd ..
        done
        TARGET_DEVICES=$(echo "${device_list[*]}" | tr ' ' '-')
        echo "TARGET_DEVICES=$TARGET_DEVICES" >> $GITHUB_ENV

    - name: 📅 Setting date variables (设置日期变量)
      run: |
        echo "RELEASE_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        REPO_URL="https://github.com/liyafe1997/kernel_xiaomi_sm8250_mod.git"
        GIT_COMMIT_ID=$(git ls-remote $REPO_URL HEAD | cut -f1)
        echo "GIT_COMMIT_ID=$GIT_COMMIT_ID" >> $GITHUB_ENV
          
    - name: 📤 Post to Release (发布到 Release)
      uses: softprops/action-gh-release@v1
      with:
        files: /home/runner/work/lmi_a15_mod/lmi_a15_mod/release/*.zip
        name: Kernel_(${{ env.TARGET_DEVICES }})_${{ github.event.inputs.kernelsu_variant }}_${{ github.event.inputs.compiled_system }}_${{ env.RELEASE_DATE }}_${{ env.GIT_COMMIT_ID }}_${{ github.event.inputs.build_type }}
        tag_name: Kernel_(${{ env.TARGET_DEVICES }})_${{ github.event.inputs.kernelsu_variant }}_${{ github.event.inputs.compiled_system }}_${{ env.RELEASE_DATE }}_${{ env.GIT_COMMIT_ID }}
        body: |
          ## 📱kernel build information | 内核构建信息
          
          ### 🇨🇳 中文 | Chinese
          - **目标机型:** ${{ env.TARGET_DEVICES }}
          - **适用系统:** ${{ github.event.inputs.compiled_system }}
          - **KernelSU支持:** ${{ github.event.inputs.kernelsu_enable }}
          - **构建类型:** ${{ github.event.inputs.build_type }}
          - **构建日期:** ${{ env.RELEASE_DATE }}
          - **提交ID:** ${{ env.GIT_COMMIT_ID }}
      
          ### 📋 安装说明 | Installation Guide
          1. 下载对应机型的刷机包
          2. 进入Recovery模式
          3. 通过Recovery刷入刷机包
          4. 重启设备
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
